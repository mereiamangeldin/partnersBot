import datetime
import time

from sqlalchemy import func
from telebot import TeleBot, types

from config import Config
from markup import Markup
from model import User, Admin, NumericVariable, Partner, Subscription
from repository import Database


class Bot:
    def __init__(self, database: Database, config: Config, bot: TeleBot, markup: Markup):
        self.database = database
        self.config = config
        self.bot = bot
        self.markup = markup
        self.register_handlers()

    def get_numeric_variables(self) -> NumericVariable:
        n = self.database.session.query(NumericVariable).get(1)
        return n

    def register_handlers(self):

        @self.bot.message_handler(commands=['start'])
        def start(message):
            inviting_user_id = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
            user = self.database.session.query(User).get(str(message.from_user.id))
            admin = self.database.session.query(Admin).get(str(message.from_user.id))
            if not user and not admin:
                invited_from_id = '0'
                if inviting_user_id:
                    inviting_user = self.database.session.query(User).get(inviting_user_id)
                    if inviting_user:
                        numeric_variable = self.get_numeric_variables()
                        inviting_user.balance += numeric_variable.invite_friend_price
                        self.database.session.commit()
                        invited_from_id = inviting_user.id
                        if inviting_user.language == self.config.language_RU:
                            self.bot.send_message(chat_id=inviting_user.id,
                                                  text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}\n–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\n\n<i>–í–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è: {numeric_variable.invite_friend_price} —Å–æ–º</i>",
                                                  parse_mode='HTML')
                        elif inviting_user.language == self.config.language_KG:
                            self.bot.send_message(chat_id=inviting_user.id,
                                                  text=f"–ö–æ–ª–¥–æ–Ω—É—É—á—É: {message.from_user.username}\n–°–∏–∑–¥–∏–Ω —à–∏–ª—Ç–µ–º–µ“£–∏–∑ –∞—Ä–∫—ã–ª—É—É –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∫–∞—Ç—Ç–∞–ª–¥—ã!\n\n<i>–°–∏–∑–≥–µ —á–µ–≥–µ—Ä–∏–ª–µ—Ç: {numeric_variable.invite_friend_price} —Å–æ–º</i>",
                                                  parse_mode='HTML')

                user = User(id=str(message.from_user.id), username=message.from_user.username,
                            invited_from_id=str(invited_from_id))
                self.database.session.add(user)
                self.database.session.commit()

            if admin:
                welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω!"
                markup = self.markup.admin_home_markup()
            else:
                user = self.database.session.query(User).get(str(message.from_user.id))
                welcome_message = "üëã–ü—Ä–∏–≤–µ—Ç!\n\n–ï—Å–ª–∏ –≤—ã —á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ, –∑–Ω–∞—á–∏—Ç, –≤—ã —Ç–∞–∫–æ–π –∂–µ –±–∏–∑–Ω–µ—Å–º–µ–Ω, –∫–∞–∫ –∏ —è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏!\n–£ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞: –∫–∞–Ω–∞–ª—ã-—Å–ø–æ–Ω—Å–æ—Ä—ã –ø–ª–∞—Ç—è—Ç –±–æ—Ç—É –∑–∞ —Ä–µ–∫–ª–∞–º—É, –∞ –±–æ—Ç –ø–ª–∞—Ç–∏—Ç –≤–∞–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã!\n\n–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –∏–∑ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞: Visa/Mastercard –∏ –¥—Ä—É–≥–∏–µ." if user.language == self.config.language_RU else "üëã–°–∞–ª–∞–º!\n\n–≠–≥–µ—Ä —Å–∏–∑ –º—É–Ω—É –æ–∫—É–ø –∂–∞—Ç—Å–∞“£—ã–∑, –¥–µ–º–µ–∫ —Å–∏–∑ –º–µ–Ω–¥–µ–π –∞–∫—á–∞ —Ç–∞–ø–∫—ã—Å—ã –∫–µ–ª–≥–µ–Ω –±–∏–∑–Ω–µ—Å–º–µ–Ω—Å–∏–∑!\n–ë—É–ª –±–æ—Ç –∞–±–¥–∞–Ω –∂”©–Ω”©–∫”©–π —Å–∏—Å—Ç–µ–º–∞–≥–∞ —ç—ç: –¥–µ–º”©”©—Ä—á“Ø –∫–∞–Ω–∞–ª–¥–∞—Ä –∂–∞—Ä–Ω–∞–º–∞ “Ø—á“Ø–Ω –±–æ—Ç–∫–æ –∞–∫—á–∞ —Ç”©–ª”©–π—Ç, –∞–ª —ç–º–∏ –±–æ—Ç –±—É–ª –∫–∞–Ω–∞–ª–¥–∞—Ä–≥–∞ –∂–∞–∑—ã–ª–≥–∞–Ω—ã“£—ã–∑ “Ø—á“Ø–Ω —Ç”©–ª”©–π—Ç!\n\n–°–∏–∑ –±–æ—Ç—Ç–æ–Ω –∞–∫—á–∞ –∞–ª–∞ –∞–ª–∞—Å—ã–∑: Visa/Mastercard –∂–∞–Ω–∞ –±–∞—à–∫–∞–ª–∞—Ä."
                markup = self.markup.user_home_markup(user.language)

            self.bot.send_message(message.chat.id, welcome_message, reply_markup=markup)

        def earn_money_options(user):
            self.bot.send_message(user.id,
                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞" if user.language == self.config.language_RU
                                  else "–ê–∫—á–∞ —Ç–∞–±—É—É–Ω—É–Ω –∂–æ–ª—É–Ω —Ç–∞–Ω–¥–∞“£—ã–∑",
                                  reply_markup=self.markup.earn_money_markup(user.language))

        def share_partner_link(user):
            numericVariable = self.get_numeric_variables()
            invited_users_num = self.database.session.query(User).filter_by(invited_from_id=str(user.id)).count()
            share_message = f"üó£–ü—Ä–∏–≥–ª–∞—Å–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –∑–∞ —ç—Ç–æ –¥–µ–Ω—å–≥–∏\n\n" \
                            f"–û—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º –¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É:\n{self.config.bot_partner_link + user.id}\n" \
                            f"<b>{numericVariable.invite_friend_price} —Å–æ–º –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞</b>\n" \
                            f"<i>–ß—Ç–æ–±—ã –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–∏–ª–∏—Å—å, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç</i>\n\n" \
                            f"‚ñ™Ô∏è<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>: {invited_users_num}\n" \
                            f"‚ñ™Ô∏è<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥</b>: {invited_users_num * numericVariable.invite_friend_price}" if user.language == self.config.language_RU \
                else f"üó£–î–æ—Å—Ç–æ—Ä—É“£—É–∑–¥—É —á–∞–∫—ã—Ä—ã“£—ã–∑ –∂–∞–Ω–∞ –∞–ª “Ø—á“Ø–Ω –∞–∫—á–∞ –∞–ª—ã“£—ã–∑\n\n" \
                     f"–ë—É–ª —à–∏–ª—Ç–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–æ—Ä—É“£—É–∑–≥–∞ –∂”©–Ω”©—Ç“Ø“£“Ø–∑:\n{self.config.bot_partner_link + user.id}\n" \
                     f"<b>–ê—Ä –±–∏—Ä —á–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å “Ø—á“Ø–Ω {numericVariable.invite_friend_price} —Å–æ–º–¥–æ–Ω</b>\n" \
                     f"<i>–ê–∫—á–∞ —á–µ–≥–µ—Ä–∏–ª–∏—à–∏ “Ø—á“Ø–Ω, —á–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å—Ç–æ—Ä –±–æ—Ç—Ç—É –∏—à—Ç–µ—Ç–∏—à–∏ –∫–µ—Ä–µ–∫</i>\n\n" \
                     f"‚ñ™Ô∏è<b>–ß–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å—Ç–æ—Ä–¥—É–Ω —Å–∞–Ω—ã</b>: {invited_users_num}\n" \
                     f"‚ñ™Ô∏è<b>–¢–∞–±—ã–ª–≥–∞–Ω –∞–∫—á–∞</b>: {invited_users_num * numericVariable.invite_friend_price}"

            self.bot.send_message(user.id, share_message, parse_mode='HTML',
                                  reply_markup=self.markup.user_home_markup(user.language))

        def show_balance(user):
            numericVariable = self.get_numeric_variables()
            balance_message = f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>: {user.balance} —Å–æ–º\n\n" \
                              f"<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥: {numericVariable.min_withdrawal_amount} —Å–æ–º</i>" if user.language == self.config.language_RU \
                else f"<b>–°–∏–∑–¥–∏–Ω –±–∞–ª–∞–Ω—Å—ã“£—ã–∑</b>: {user.balance} —Å–æ–º\n\n" \
                     f"<i>–ê–∫—á–∞ –∞–ª—É—É “Ø—á“Ø–Ω –º–∏–Ω–∏–º–∞–ª–¥—É—É —Å—É–º–º–∞</i>: {numericVariable.min_withdrawal_amount} —Å–æ–º"
            self.bot.send_message(user.id, balance_message, parse_mode='HTML',
                                  reply_markup=self.markup.withdraw_markup(
                                      '–°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏' if user.language == self.config.language_RU else '–ê–∫—á–∞ –∞–ª—É—É'))

        def switch_language(user):
            new_language = self.config.language_KG if user.language == self.config.language_RU else self.config.language_RU
            user.language = new_language
            self.database.session.commit()
            response_message = "–ü—Ä–æ–≥—Ä–∞–º–º–∞–Ω—ã–Ω —Ç–∏–ª–∏ –∫—ã—Ä–≥—ã–∑—á–∞–≥–∞ ”©–∑–≥”©—Ä—Ç“Ø–ª–¥“Øüá∞üá¨" if new_language == self.config.language_KG \
                else "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫üá∑üá∫"
            self.bot.send_message(user.id, response_message,
                                  reply_markup=self.markup.user_home_markup(new_language))

        def admin_send_message(message, admin):
            users = self.database.session.query(User).all()
            active_users = 0
            passive_users = 0
            for u in users:
                try:
                    initial_text = message.text
                    text = initial_text.replace("{username}", u.username)
                    self.bot.send_message(u.id, text)
                    active_users += 1
                except Exception as e:
                    passive_users += 1
            numericVariable = self.get_numeric_variables()
            numericVariable.total_users_amount = len(users)
            numericVariable.active_users_amount = active_users
            numericVariable.passive_users_amount = passive_users
            admin.admin_do_input = False
            admin.admin_input_val = ''
            self.database.session.commit()
            self.bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                                  reply_markup=self.markup.admin_home_markup())

        def is_number(var):
            if (var[0] == '-' and not str.isdigit(var[1:])) or (
                    not str.isdigit(var) and not var[0] == '-'):
                return False
            return True

        def admin_delete_admin(message, admin):
            if not is_number(message.text):
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—å")
                return
            admin.admin_do_input = False
            deleting_admin = self.database.session.query(Admin).get(message.text)
            self.database.session.delete(deleting_admin)
            self.bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω", reply_markup=self.markup.admin_home_markup())

        def admin_new_admin_name(message, admin):
            admin.new_admin_name = message.text
            admin.admin_input_val = self.config.admin_inner_vars['waiting_new_admin_id']
            self.database.session.commit()
            self.bot.send_message(message.chat.id,
                                  "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–æ—Ç https://t.me/username_to_id_bot",
                                  reply_markup=self.markup.cancel_markup())

        def admin_new_admin_id(message, admin):
            if not is_number(message.text):
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—å")
                return
            exist_admin = self.database.session.query(Admin).get(message.text)
            if exist_admin:
                self.bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                                      reply_markup=self.markup.admin_home_markup())
                return
            new_admin = Admin(id=message.text, name=admin.new_admin_name)
            admin.admin_do_input = False
            admin.new_admin_name = ''
            self.database.session.add(new_admin)
            self.database.session.commit()
            self.bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω",
                                  reply_markup=self.markup.admin_home_markup())

        def admin_new_channel_link(message, admin):
            admin.new_channel_link = message.text
            admin.admin_input_val = self.config.admin_inner_vars['waiting_new_channel_id']
            self.database.session.commit()
            self.bot.send_message(message.chat.id,
                                  "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞ –Ω–∞ –±–æ—Ç https://t.me/username_to_id_bot",
                                  reply_markup=self.markup.cancel_markup())

        def admin_new_channel_id(message, admin):
            if not is_number(message.text):
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—å")
                return
            exist_channel = self.database.session.query(Partner).get(message.text)
            if exist_channel:
                self.bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                                      reply_markup=self.markup.admin_home_markup())
                return
            channel = Partner(id=message.text, link=admin.new_channel_link)
            self.database.session.add(channel)
            admin.admin_do_input = False
            admin.new_channel_link = ''
            self.database.session.commit()
            self.bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω", reply_markup=self.markup.admin_home_markup())

        def admin_delete_channel(message, admin):
            if not is_number(message.text):
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—å")
                return
            admin.admin_do_input = False
            deleting_channel = self.database.session.query(Partner).get(message.text)
            self.database.session.delete(deleting_channel)
            self.database.session.commit()
            self.bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω", reply_markup=self.markup.admin_home_markup())

        def admin_change_variable(message, admin, changing_field):
            if not str.isdigit(message.text):
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω–∏—Ç—å")
                return

            numericVariables = self.get_numeric_variables()
            new_value = int(message.text)
            match changing_field:
                case text if text == self.config.admin_change_variable.get('invite_friend'):
                    numericVariables.invite_friend_price = new_value
                case text if text == self.config.admin_change_variable.get('join_channel'):
                    numericVariables.join_channel_price = new_value
                case text if text == self.config.admin_change_variable.get('view_post'):
                    numericVariables.view_post_price = new_value
                case text if text == self.config.admin_change_variable.get('min_withdrawal_amount'):
                    numericVariables.min_withdrawal_amount = new_value
                case text if text == self.config.admin_change_variable.get('min_invited_friends'):
                    numericVariables.min_invited_friends = new_value
            admin.admin_do_input = False
            self.database.session.commit()
            self.bot.send_message(message.chat.id, "–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ",
                                  reply_markup=self.markup.admin_home_markup())

        @self.bot.message_handler(func=lambda message: True)
        def handle_message(message):
            user = self.database.session.query(User).get(str(message.from_user.id))
            admin = self.database.session.query(Admin).get(str(message.from_user.id))

            if not admin:
                if message.text in self.config.user_home_menu[user.language].values():
                    if user.username != message.from_user.username:
                        user.username = message.from_user.username
                        self.database.session.commit()

                    actions = {
                        self.config.user_home_menu[user.language]['language']: lambda u: switch_language(u),
                        self.config.user_home_menu[user.language]['balance']: lambda u: show_balance(u),
                        self.config.user_home_menu[user.language]['partners']: lambda u: share_partner_link(u),
                        self.config.user_home_menu[user.language]['earn_money']: lambda u: earn_money_options(u),
                    }
                    actions[message.text](user)
                return

            if admin.admin_do_input:
                if message.text == self.config.admin_inner_vars.get('cancel'):
                    admin.admin_do_input = False
                    admin.admin_input_val = ''
                    self.database.session.commit()
                    self.bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω",
                                          reply_markup=self.markup.admin_home_markup())
                match admin.admin_input_val:
                    case text if text == self.config.admin_inner_vars.get("send_button"):
                        admin_send_message(message=message, admin=admin)
                    case text if text == self.config.admin_inner_vars.get("waiting_deleting_admin_id"):
                        admin_delete_admin(message=message, admin=admin)
                    case text if text == self.config.admin_inner_vars.get("waiting_new_admin_name"):
                        admin_new_admin_name(message=message, admin=admin)
                    case text if text == self.config.admin_inner_vars.get("waiting_new_admin_id"):
                        admin_new_admin_id(message=message, admin=admin)
                    case text if text == self.config.admin_inner_vars.get("waiting_new_channel_link"):
                        admin_new_channel_link(message=message, admin=admin)
                    case text if text == self.config.admin_inner_vars.get("waiting_new_channel_id"):
                        admin_new_channel_id(message=message, admin=admin)
                    case text if text == self.config.admin_inner_vars.get("waiting_deleting_channel_id"):
                        admin_delete_channel(message=message, admin=admin)
                    case changing_field if changing_field in self.config.admin_change_variable.values():
                        admin_change_variable(message=message, admin=admin, changing_field=changing_field)

                return

            if message.text.split(':')[0] in self.config.admin_change_variable.values():
                admin.admin_do_input = True
                admin.admin_input_val = message.text.split(':')[0]
                self.database.session.commit()
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å: ",
                                      reply_markup=self.markup.cancel_markup())

                return

            match message.text:
                case text if text == self.config.admin_inner_vars.get('cancel'):
                    admin.admin_input_val = ''
                    self.database.session.commit()
                    self.bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω",
                                          reply_markup=self.markup.admin_home_markup())
                case text if text == self.config.admin_home_menu.get('change_variable'):
                    self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                                          reply_markup=self.markup.change_variables_markup())
                case text if text == self.config.admin_home_menu.get('add_admin'):
                    admin.admin_do_input = True
                    admin.admin_input_val = self.config.admin_inner_vars['waiting_new_admin_name']
                    self.database.session.commit()
                    self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∞: ",
                                          reply_markup=self.markup.cancel_markup())
                case text if text == self.config.admin_home_menu.get('delete_admin'):
                    admins = self.database.session.query(Admin).all()
                    text = "\n".join([f"{a.name} (ID: {a.id})" for a in admins if
                                      a.id != self.config.super_admin_id and a.id != str(message.from_user.id)])
                    admin.admin_do_input = True
                    admin.admin_input_val = self.config.admin_inner_vars['waiting_deleting_admin_id']
                    self.database.session.commit()
                    self.bot.send_message(message.chat.id,
                                          f"–õ–∏—Å—Ç –∞–¥–º–∏–Ω–æ–≤:\n{text}\n–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ",
                                          reply_markup=self.markup.cancel_markup())
                case text if text == self.config.admin_home_menu.get('add_channel'):
                    admin.admin_do_input = True
                    admin.admin_input_val = self.config.admin_inner_vars['waiting_new_channel_link']
                    self.database.session.commit()
                    self.bot.send_message(message.chat.id,
                                          "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.\n\n–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª: ",
                                          reply_markup=self.markup.cancel_markup())
                case text if text == self.config.admin_home_menu.get('delete_channel'):
                    partners = self.database.session.query(Partner).all()
                    partner_list_text = "\n".join([f"{partner.link} (ID: {partner.id})" for partner in partners])
                    admin.admin_do_input = True
                    admin.admin_input_val = self.config.admin_inner_vars['waiting_deleting_channel_id']
                    self.database.session.commit()
                    self.bot.send_message(message.chat.id,
                                          f"–õ–∏—Å—Ç –∫–∞–Ω–∞–ª–æ–≤:\n{partner_list_text}\n–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ",
                                          reply_markup=self.markup.cancel_markup())
                case text if text == self.config.admin_home_menu.get('view_bot_statistics'):
                    numericVariable = self.get_numeric_variables()
                    self.bot.send_message(message.chat.id,
                                          f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {numericVariable.total_users_amount}\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ: {numericVariable.active_users_amount}\n–ú–µ—Ä—Ç–≤—ã–µ: {numericVariable.passive_users_amount}",
                                          reply_markup=self.markup.admin_home_markup())
                case text if text == self.config.admin_home_menu.get('send_message'):
                    admin.admin_do_input = True
                    admin.admin_input_val = self.config.admin_inner_vars['send_button']
                    self.database.session.commit()
                    self.bot.send_message(message.chat.id,
                                          f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                                          reply_markup=self.markup.cancel_markup())
                case text if text == self.config.admin_home_menu.get('view_channel_statistics'):
                    text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
                    results = self.database.session.query(
                        Subscription.channel_id,
                        func.count(Subscription.user_id).label('num_users')
                    ).group_by(Subscription.channel_id).all()

                    results_dict = {channel_id: num_users for channel_id, num_users in results}
                    partners = self.database.session.query(Partner).all()
                    for p in partners:
                        num = results_dict.get(p.id, 0)
                        text += f'\n\nChannel link: {p.link}\nSubscribed users: {num}'
                    self.bot.send_message(message.chat.id, text, reply_markup=self.markup.admin_home_markup())

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call):
            user = self.database.session.query(User).get(str(call.from_user.id))

            match call.data:
                case 'view_post':
                    view_post_procedure(user=user, call=call)
                case 'invite_friend':
                    self.bot.edit_message_text(get_invite_text(user=user), parse_mode='HTML', chat_id=call.message.chat.id,
                                               message_id=call.message.message_id)
                case 'join_channel':
                    join_channel_procedure(user=user, call=call)
                case 'withdraw':
                    self.bot.edit_message_text(get_withdraw_text(user=user), parse_mode='HTML', chat_id=call.message.chat.id,
                                          message_id=call.message.message_id)
                case 'checking_user_subscription':
                    checking_user_subscription(user=user, call=call)

        def checking_user_subscription(user, call):
            numeric_variables = self.get_numeric_variables()
            try:
                chat_member = self.bot.get_chat_member(user.current_channel_id, int(user.id))  # Synchronous call
                if chat_member.status in ['member', 'administrator', 'creator']:
                    subscription = Subscription(user_id=user.id, channel_id=user.current_channel_id)
                    self.database.session.add(subscription)
                    user.balance += numeric_variables.join_channel_price
                    self.database.session.commit()
                    if user.language == self.config.language_RU:
                        self.bot.edit_message_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {numeric_variables.join_channel_price} —Å–æ–º',
                                              chat_id=call.message.chat.id, message_id=call.message.message_id)
                    else:
                        self.bot.edit_message_text(f'–ö—É—Ç—Ç—É–∫—Ç–∞–π–±—ã–∑! –°–∏–∑ {numeric_variables.join_channel_price} —Å–æ–º —Ç–∞–ø—Ç—ã“£—ã–∑',
                                              chat_id=call.message.chat.id, message_id=call.message.message_id)
                    time.sleep(3)
                    join_channel_procedure(user=user, call=call)
                else:
                    if user.language == self.config.language_RU:
                        self.bot.edit_message_text(f'‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
                                              chat_id=call.message.chat.id, message_id=call.message.message_id)
                    else:
                        self.bot.edit_message_text(f'‚ùå –°–∏–∑ –±—É–ª –∫–∞–Ω–∞–ª–≥–∞ –∂–∞–∑—ã–ª—É—É—á—É —ç–º–µ—Å—Å–∏–∑', chat_id=call.message.chat.id,
                                              message_id=call.message.message_id)
                    time.sleep(3)
                    join_channel_procedure(user=user, call=call)
            except Exception as e:
                print(e)  # For debugging purposes
                self.bot.edit_message_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
                                      chat_id=call.message.chat.id, message_id=call.message.message_id)
            user.current_channel_id = '0'
            self.database.session.commit()

        def join_channel_procedure(user, call):
            found = False
            numeric_variable = self.get_numeric_variables()
            sub_id_tuples = self.database.session.query(
                            Subscription.channel_id
                        ).filter(Subscription.user_id == user.id).all()
            sub_ids = [channel_id[0] for channel_id in sub_id_tuples]
            for users_channel_id in sub_ids:
                chat_member = self.bot.get_chat_member(users_channel_id, int(user.id))  # Synchronous call
                if chat_member.status not in ['member', 'administrator', 'creator']:
                    found = True
                    channel = self.database.session.query(Partner).get(users_channel_id)
                    if user.language == self.config.language_RU:
                        self.bot.send_message(call.message.chat.id,
                                         f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞\n{channel.link}\n\nC –±–∞–ª–∞–Ω—Å–∞ —Å–Ω–∏–º–∞–µ—Ç—Å—è —Å—É–º–º–∞: {numeric_variable.join_channel_price} —Å–æ–º")
                    else:
                        self.bot.send_message(call.message.chat.id,
                                         f"–°–∏–∑ –∫–∞–Ω–∞–ª–≥–∞ –∂–∞–∑—ã–ª—É—É–Ω—É —Ç–æ–∫—Ç–æ—Ç—Ç—É“£—É–∑\n{channel.link}\n\n–°—É–º–º–∞ –±–∞–ª–∞–Ω—Å—Ç–∞–Ω —á—ã–≥–∞—Ä—ã–ª–∞—Ç: {numeric_variable.join_channel_price} —Å–æ–º")
                    user.balance -= numeric_variable.join_channel_price
                    subscription = self.database.session.query(Subscription).filter_by(user_id=user.id, channel_id=channel.id).first()
                    self.database.session.delete(subscription)
                    self.database.session.commit()
                    time.sleep(1)

            if found:
                return

            partners = self.database.session.query(Partner).all()
            for partner in partners:
                if partner.id not in sub_ids:
                    if user.language == self.config.language_RU:
                        self.bot.edit_message_text(
                            f'<b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b>\n{partner.link}\n\n<b>–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π {numeric_variable.join_channel_price} —Å–æ–º</b>',
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id, parse_mode='HTML',
                            reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
                                types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                                           callback_data='checking_user_subscription')))
                    else:
                        self.bot.edit_message_text(
                            f'<b>–ö–∞–Ω–∞–ª–≥–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑</b>\n{partner.link}\n\n<b>–∂–∞–Ω–∞ {numeric_variable.join_channel_price} —Å–æ–º —Ç–∞–±–∞—Ç</b>',
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id, parse_mode='HTML',
                            reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
                                types.InlineKeyboardButton('–ñ–∞–∑—ã–ª—É—É–Ω—É —Ç–µ–∫—à–µ—Ä“Ø“Ø',
                                                           callback_data='checking_user_subscription')))
                    user.current_channel_id = partner.id
                    self.database.session.commit()
                    return

            if user.language == self.config.language_RU:
                self.bot.edit_message_text(
                    f'‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã\n<i>–í—ã –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π</i>',
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id, parse_mode='HTML')
            else:
                self.bot.edit_message_text(
                    f'‚ùå –£—á—É—Ä–¥–∞ –±–∞—Ä–¥—ã–∫ –∫–∞–Ω–∞–ª–¥–∞—Ä–≥–∞ –∂–∞–∑—ã–ª–¥—ã“£—ã–∑\n<i>–î–æ—Å—Ç–æ—Ä–¥—É —á–∞–∫—ã—Ä—É—É –º–µ–Ω–µ–Ω –∞–∫—á–∞ —Ç–∞–±—É—É–Ω—É —É–ª–∞–Ω—Ç–∞ –∞–ª–∞—Å—ã–∑</i>',
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id, parse_mode='HTML')




        def get_invite_text(user):
            numeric_variable = self.get_numeric_variables()
            invited_num = self.database.session.query(
                func.count(User.id)
            ).filter(User.invited_from_id == user.id).scalar()
            text_ru = f"üó£–ü—Ä–∏–≥–ª–∞—Å–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –∑–∞ —ç—Ç–æ –¥–µ–Ω—å–≥–∏\n\n–û—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º –¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É:\n{self.config.bot_partner_link + user.id}\n<b>{numeric_variable.invite_friend_price} —Å–æ–º –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞</b>\n<i>–ß—Ç–æ–±—ã –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–∏–ª–∏—Å—å, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç</i>\n\n‚ñ™Ô∏è<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>: {invited_num}\n‚ñ™Ô∏è<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥</b>: {invited_num * numeric_variable.invite_friend_price}"
            text_kg = f"üó£–î–æ—Å—Ç–æ—Ä—É“£—É–∑–¥—É —á–∞–∫—ã—Ä—ã“£—ã–∑ –∂–∞–Ω–∞ –∞–ª “Ø—á“Ø–Ω –∞–∫—á–∞ –∞–ª—ã“£—ã–∑\n\n–ë—É–ª —à–∏–ª—Ç–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–æ—Ä—É“£—É–∑–≥–∞ –∂”©–Ω”©—Ç“Ø“£“Ø–∑:\n{self.config.bot_partner_link + user.id}\n<b>–ê—Ä –±–∏—Ä —á–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å “Ø—á“Ø–Ω {numeric_variable.invite_friend_price} —Å–æ–º–¥–æ–Ω</b>\n<i>–ê–∫—á–∞ —á–µ–≥–µ—Ä–∏–ª–∏—à–∏ “Ø—á“Ø–Ω, —á–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å—Ç–æ—Ä –±–æ—Ç—Ç—É –∏—à—Ç–µ—Ç–∏—à–∏ –∫–µ—Ä–µ–∫</i>\n\n‚ñ™Ô∏è<b>–ß–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å—Ç–æ—Ä–¥—É–Ω —Å–∞–Ω—ã</b>: {invited_num}\n‚ñ™Ô∏è<b>–¢–∞–±—ã–ª–≥–∞–Ω –∞–∫—á–∞</b>: {invited_num * numeric_variable.invite_friend_price}"
            return text_ru if user.language == self.config.language_RU else text_kg

        def get_withdraw_text(user):
            numeric_variable = self.get_numeric_variables()
            invited_num = self.database.session.query(
                func.count(User.id)
            ).filter(User.invited_from_id == user.id).scalar()
            text_ru = f"‚ùå\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥</b>: {numeric_variable.min_withdrawal_amount} —Å–æ–º\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</b>: {numeric_variable.min_invited_friends}\n\n<i>–í–∞—à –±–∞–ª–∞–Ω—Å</i>: {user.balance} —Å–æ–º\n<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π</i>: {invited_num}"
            text_kg = f"‚ùå\n<b>–ê–∫—á–∞ –∞–ª—É—É “Ø—á“Ø–Ω –º–∏–Ω–∏–º–∞–ª–¥—É—É —Å—É–º–º–∞</b>: {numeric_variable.min_withdrawal_amount} —Å–æ–º\n<b>–ß–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å—Ç–æ—Ä–¥—É–Ω –º–∏–Ω–∏–º–∞–ª–¥—É—É —Å–∞–Ω—ã</b>: {numeric_variable.min_invited_friends}\n\n<i>–°–∏–∑–¥–∏–Ω –±–∞–ª–∞–Ω—Å—ã“£—ã–∑</i>: {user.balance} —Å–æ–º\n<i>–ß–∞–∫—ã—Ä—ã–ª–≥–∞–Ω –¥–æ—Å—Ç–æ—Ä–¥—É–Ω —Å–∞–Ω—ã</i>: {invited_num}"
            return text_ru if user.language == self.config.language_RU else text_kg

        def view_post_procedure(user, call):
            numeric_variable = self.get_numeric_variables()
            if user.view_post_time > datetime.datetime.now():
                time_difference = user.view_post_time - datetime.datetime.now()
                seconds = time_difference.seconds
                hours = seconds // 3600
                minutes = (seconds % 3600) // 60
                seconds = (seconds % 3600) % 60
                if user.language == self.config.language_RU:
                    self.bot.edit_message_text(
                        f'–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑:\n{hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥',
                        chat_id=call.message.chat.id, message_id=call.message.message_id)
                else:
                    self.bot.edit_message_text(
                        f'–ü–æ—Å—Ç—Ç—É –∫”©—Ä“Ø“Ø:\n{hours} —Å–∞–∞—Ç, {minutes} –º“Ø–Ω”©—Ç, {seconds} —Å–µ–∫—É–Ω–¥ —É–±–∞–∫—ã—Ç—Ç–∞–Ω –∫–∏–π–∏–Ω',
                        chat_id=call.message.chat.id, message_id=call.message.message_id)
                return

            partners = self.database.session.query(Partner).all()
            for i in range(len(partners)):
                if user.language == self.config.language_RU:
                    self.bot.edit_message_text(f'<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞</b>\nID: {partners[i].id}\n\n{i+1}/{len(partners)}', chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')
                else:
                    self.bot.edit_message_text(f'<b>–ü–æ—Å—Ç—Ç—É –∫”©—Ä“Ø“Ø</b>\nID: {partners[i].id}\n\n{i+1}/{len(partners)}', chat_id=call.message.chat.id,
                                          message_id=call.message.message_id, parse_mode='HTML')
                time.sleep(0.3)
            if user.language == self.config.language_RU:
                self.bot.edit_message_text(f'–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n<b>–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {numeric_variable.view_post_price} —Å–æ–º</b>', chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')
            else:
                self.bot.edit_message_text(f'–ü–æ—Å—Ç—Ç–æ—Ä–¥—É –∫”©—Ä“Ø“Ø –∞—è–∫—Ç–∞–¥—ã\n<b>–°–∏–∑ {numeric_variable.view_post_price} —Å–æ–º —Ç–∞–ø—Ç—ã“£—ã–∑</b>', chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='HTML')
            user.balance += numeric_variable.view_post_price
            user.view_post_time = datetime.datetime.now()+datetime.timedelta(hours=12)
            self.database.session.commit()

